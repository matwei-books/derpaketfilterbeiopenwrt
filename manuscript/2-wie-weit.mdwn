
Wie weit kann mich ein Paketfilter überhaupt schützen?
======================================================

Um zu verstehen, wie weit und wovor mich ein Paketfilter schützen kann,
greife ich auf das Open Systems Interconnection (OSI) Modell zurück.
Dieses Modell dient seit vielen Jahren als Referenzmodell für
Netzwerkprotokolle.

OSI Modell
----------

Es ist als Schichtenmodell ausgeführt, bei dem jede Schicht genau definierte
Aufgaben hat, die Dienste der darunterliegenden nutzt und seine
Dienste den darüberliegenden zur Verfügung stellt.
Es gibt in diesem Modell die folgenden sieben Schichten:

|   | deutsche Bezeichnung   | englische Bezeichnung |
|---|------------------------|-----------------------|
| 7 | Anwendungsschicht      | application layer     |
| 6 | Darstellungsschicht    | presentation layer    |
| 5 | Sitzungsschicht        | session layer         |
| 4 | Transportschicht       | transport layer       |
| 3 | Vermittlungsschicht    | network layer         |
| 2 | Sicherungsschicht      | data link layer       |
| 1 | Bitübertragungsschicht | physical layer        |

Für das OSI Modell selbst gibt es keine Implementierung, es wird nur für die
Einordnung und den Vergleich realer Protokolle verwendet.
Dabei können diese mehrere Schichten des OSI Modells abbilden, zum Beispiel:

*   Ethernet die Schichten 1 und 2
*   IP, ICMP, IGMP die Schicht 3
*   TCP, UDP die Schicht 4
*   HTTP, SMTP die Schichten 5, 6 und 7

Paketfilter arbeiten auf den OSI Schichten 1 bis 4.
Habe ich verschlüsselten Datenverkehr, kann der Paketfilter nur bis zur
Schicht 3, den IP-Adressen, arbeiten.

Application Gateways
--------------------

Für Protokolle der Ebenen 5 bis 7 muss ich entweder auf Application Gateways
für die entsprechenden Protokolle setzen und mit dem Paketfilter erzwingen,
dass diese genutzt werden.
Oder ich untersuche den Datenverkehr mittels Deep Packet Inspection (DPI)
und steuere mit den gewonnenen Erkenntnissen den Paketfilter und damit den
Datenverkehr.

Fail2ban
--------

Eine weitere Möglichkeit, einen Server zu schützen, besteht darin, die
Log-Nachrichten des Servers auszuwerten und unerwünschten Datenverkehr
zu unterbinden.
Fail2ban ist eine Software, die genau das tut: die Systemprotokolle
auswerten und nach einer bestimmten Anzahl fehlerhafter Logins die
betreffende IP-Adresse über den Paketfilter sperren.
Damit kann ich Brute-Force-Attacken auf Login-Dienste verlangsamen und somit
unbrauchbar machen.

Das funktioniert jedoch nur, wenn der fail2ban-Dämon die benötigten
Log-Nachrichten erhält und der Datenstrom über diesen Rechner läuft.
Für lokale Dienste ist das leicht zu realisieren.

Port-Knocking und TCP-Stealth
-----------------------------

Eine weitere Möglichkeit, bei der ein Paketfilter einen Server schützt,
ist Port-Knocking.
Bei diesem Verfahren unterbindet der Paketfilter zunächst jeglichen
Datenverkehr.
Erst wenn die Software auf dem Server, die den Datenverkehr belauscht, eine
bestimmte Signatur in den Datenpaketen erkennt, veranlasst sie den
Paketfilter, den Datenverkehr vom Sender der Signatur zuzulassen.

Damit lassen sich Zugänge zu einem System so verbergen, dass ein Angreifer
den kompletten Datenverkehr des Systems beobachten und
analysieren müsste, um den geschützten Dienst zu finden und die Signatur zu
ermitteln.
Dieses Verfahren ist sicherer als das nachträgliche Sperren bei
Fehlversuchen, aber nur für einen begrenzten Personenkreis geeignet, dem die
entsprechende Signatur bekannt sein und die Software zur Erzeugung der
Signatur zur Verfügung stehen muss.

TCP-Stealth funktioniert, oberflächlich betrachtet, ähnlich.
Es ist aber direkt im TCP-Stack implementiert und arbeitet ohne den
Paketfilter.
Die Signatur befindet sich hier direkt in den Datagrammen, welche die
TCP-Verbindung aufbauen.
Damit ist TCP-Stealth noch schwerer zu entdecken, als Port-Knocking, welches
für die Signatur zusätzliche Datagramme verwendet, die nichts mit der
eigentlichen Verbindungsaufnahme zu tun haben und dadurch einem aufmerksamen
Beobachter auffallen könnten.

