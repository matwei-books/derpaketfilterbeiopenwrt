
Härten des Systems
==================

Ein wichtiger Aspekt beim Betrieb eines jeden Rechners ist das Härten des
Systems, damit ich hinreichend sicher sein kann, dass ich meine Geräte
kontrolliere und nicht jemand anders.

Dabei kann ich mich von den [Ten Immutable Laws Of Security][tilos] leiten
lassen, die in einem Technet Artikel von Mircrosoft zu finden sind.

Für das konkrete Absichern eines OpenWrt-Systems finde ich Informationen im
[Wiki von OpenWrt][wiki].

Außerdem kann ich auf allgemeine Tipps zum Härten von Linux-Systemen
zurückgreifen, die ich entsprechend der Situation an meinem Gerät adaptiere.

Den Zugang sichern
------------------

Bei der Sicherung des Zugangs geht es um die Art und Weise der Anmeldung
selbst.

Im OpenWrt-Wiki werden vier Arten, sich am System anzumelden, unterschieden,
die von völlig unsicher bis ziemlich sicher gehen.

1.  Frag nach gar nichts
2.  Frag nach Benutzername und Kennwort über eine ungesicherte Verbindung
3.  Frag nach Benutzername und Kennwort über eine gesicherte Verbindung
4.  Frag nach Benutzername und einer Signatur anstelle eines Kennworts

### 1. Frag nach gar nichts

Jeder, der diesen Zugang erreichen kann, kann alles mit dem System machen,
ohne sich anmelden zu müssen.

Offensichtlich ist das für feindliche Umgebungen wie das Internet völlig
ungeeignet.

In vertrauenswürdigen Umgebungen ist so ein Zugang vielleicht tolerabel,
wenn absolut nichts von der Sicherheit des Gerätes abhängt.

Das kann zum Beispiel eine Testumgebung sein, in der vor jedem Test der
OpenWrt-Router automatisch konfiguriert wird.
Einen anderen Einsatzfall kann ich mir im Moment nicht vorstellen.

### 2. Frag nach Benutzername und Kennwort über eine ungesicherte Verbindung

Das betrifft die Administration via Telnet oder HTTP.
Es ist etwas besser als Variante 1.
Bevor jemand anderes das Gerät manipulieren kann, muss er sich die
Zugangsdaten besorgen.

Dazu reicht es, wenn er die Möglichkeit hat, den Datenverkehr zwischen dem
Administrator und dem OpenWrt-Gerät genau dann mitschneiden kann, wenn sich
der Administrator anmeldet.

Da entsprechende Software bereits seit vielen Jahren verfügbar ist,
reduziert sich der Aufwand für den Angreifer auf das Positionieren eines
solchen Programms auf einem geeigneten Rechner zwischen Administrator und
OpenWrt-Gerät.

### 3. Frag nach Benutzername und Kennwort über eine gesicherte Verbindung

Dazu verwende ich SSH oder HTTPS für die Administration.
Damit ist das System relativ sicher.

Natürlich kann die Verschlüsselung gebrochen werden.
Der Aufwand dafür hängt von den verwendeten Algorithmen, der
Länge der Schlüssel und der Stärke des Kennworts ab.

Ein Angreifer muss hier den Datenverkehr mitschneiden und entschlüsseln, um
an das Kennwort zu kommen.

Alternativ kann er versuchen die korrekte Kombination von Benutzername und
Kennwort mit einem Brute-Force-Angriff zu erraten.

### 4. Frag nach Benutzername und einer Signatur anstelle eines Kennworts

Das ist die Anmeldung via SSH mit Public-Key-Authentication beziehungsweise
HTTPS mit Client-Zertifikat.

Beim Public-Key-Verfahren verwende ich einen privaten Schlüssel, um mich am
Gerät anzumelden.
Den zugehörigen öffentlichen Schlüssel habe ich auf dem Gerät hinterlegt.

Ein Angreifer kann keine Passworte ausprobieren, da keine für die Anmeldung
verwendet werden.
Um Zugang zu dem Gerät zu bekommen, muss er in den Besitz des privaten
Schlüssels gelangen.
Damit ist die Hürde für ihn noch ein Stück höher.

Allerdings muss ich nun aufpassen, dass mir der private Schlüssel nicht
abhanden kommt.
Und das sowohl in dem Sinne, dass jemand der den Schlüssel bekommt, Zugang
zum OpenWrt-Gerät bekommt, als auch in dem Sinne, dass ich keinen Zugang
ohne den Schlüssel habe.

Neben diesen vier prinzipiellen Arten, wie der Zugang zum Gerät geregelt
ist, gibt es begleitende Maßnahmen, die die Sicherheit erhöhen können.

Mittels Paketfilterregeln kann ich den Zugang zur
Administrationsschnittstelle auf vertrauenswürdige IP-Adressen beschränken.
Das ist ein starker Schutz, wenn die freigegebenen IP-Adressen wirklich zu
vertrauenswürdigen Geräten führen.

Wenn ich einen anderen Benutzernamen als *root* verwende, mache ich
Brute-Force-Attacken, die nur auf diesen Benutzernamen abzielen,
wirkungslos.

Mit starken Kennworten erschwere ich Brute-Force-Attacken, die auf
Wörterbüchern aufbauen.

> Woran erkenne ich ein starkes Kennwort?
> 
> Indem ich selbst mit einem guten Password-Cracker versuche, das Passwort
> zu knacken.
> Geeignete Software ist im Internet frei verfügbar.
> Dabei sollte ich den Passwort-Cracker aber nicht im Internet (Stichwort
> Cloud) laufen lassen.
> Besser ist es, einen einfachen Stringvergleich für den Kennwort-Test
> einzustellen, denn ich will ja nur wissen, nach wievielen Versuchen das
> Kennwort gefunden wurde.
> Dann läuft der Cracker auch auf einfacher Hardware hinreichend schnell.
> Und natürlich muss das auf einem Rechner laufen, der nicht öffentlich
> zugänglich ist.

Als weitere Schutzmaßnahme kann ich die Administrationszugänge auf andere
Ports verlegen anstelle von 22 für SSH und 443 für HTTPS.
Damit schütze ich mich vor automatischen Programmen, die nach Services an
diesen Ports suchen um anschließend Brute-Force-Attacken darauf zu beginnen.

System härten
-------------

Damit sind wir durch mit der Absicherung des Zugangs, der nächste Schritt
ist die Härtung des Systems selbst.
Das ist vor allem dann wichtig, wenn das Gerät nicht nur als Router
arbeitet, sondern zusätzlich weitere Dienste anbietet.

Der erste Punkt ist, so wenig wie möglich Software auf dem Gerät zu
installieren und zu starten.
Nur, was wirklich nötig ist.

Falls ich Dienste auf dem Gerät anbiete, die als Einfallstor für Angreifer
dienen können, kann ich mit SELinux den Schaden im Fall eines erfolgreichen
Angriffs in Grenzen halten.
SELinux ist für OpenWrt verfügbar.
Das Thema aber sehr umfangreich ist, gehe ich an dieser Stelle nicht weiter
darauf ein.

Ein weiterer Punkt, der bereits bei der Absicherung des Zugangs angedeutet
war, ist das Verwenden von weiteren Benutzerkennungen.
Prinzipiell brauche ich nur das Paket *sudo* um den Zugang zu privilegierten
Diensten für die einzelnen Benutzer zu steuern.
Das Paket *shadow-useradd* erleichtert das Einrichten von weiteren
Benutzern, erfahrene Unix-Administratoren können weitere Benutzer aber auch
ohne dass anlegen.
Für die Public-Key-Authentication bei SSH kopiere ich für jeden Benutzer die
zugelassenen Schlüssel in die Datei *$HOME/.ssh/authenticated_keys*.

Verwendet das System für die angebotenen Dienste externe Datenträger, ist es
unter Umständen sinnvoll, diese zu verschlüsseln.
Das geht wiederum zu Lasten der Performance.

Netzwerk härten
---------------

Ein wichtiger Punkt ist, keinen Port am externen Interface des Routers (WAN)
zu öffnen.
Generell.
Auch, wenn ich Dienste auf dem Gerät betreibe.

Dienste, die ich nach außen anbiete, sollten auf dedizierten Servern, am
besten in einem dedizierten Netz (DMZ) laufen.

Natürlich können auf dem Router laufende Dienste auch aus dem internen Netz
angegriffen werden.
Nur ist die Wahrscheinlichkeit, dass das aus einem öffentlichen Netz
geschieht, um viele Größenordnungen höher.

Ein kompromittierter Server ist auch in einem dedizierten Netz
problematisch.
Ein kompromittierter Router gibt jedoch das ganze Netz preis, das dahinter
angeschlossen ist.

Eine Ausnahme könnte man für den Endpunkt eines VPN machen, das auf dem
OpenWrt-Gerät endet.
Hier kann man zumindest den Zugriff auf wenige Adressen beschränken und für
alle anderen sperren.

Eine Möglichkeit, einzelne Ports für einzelne Adressen freizugeben ist
Port-Knocking.
Dafür kann man bei OpenWrt das Paket *knockd* installieren.

Eine weitere Möglichkeit, beliebige, aber vorher definierte Aktionen auf dem
Gerät aus der Ferne zu starten ist Ostiary, für das es ebenfalls ein Paket
bei OpenWrt gibt und Client-Programme für sehr viele Betriebssysteme.
Damit ist es ebenfalls möglich, Ports für einzelne IP-Adressen
freizuschalten.

Mit fail2ban kann ich Brute-Force-Attacken, die von einzelnen Adressen
ausgehen, sehr gut abbrechen.
Ähnliches kann ich mit dem Programm logtrigger selbst implementieren.

Bei der Absicherung des Zugangs schrieb ich bereits, dass ein
verschlüsselter Konfigurationszugang sicherer ist, als ein
unverschlüsselter.
Für SSH anstelle von Telnet ist das recht einfach zu installieren, und
mittlerweile meist sowieso schon eingerichtet.

Beim Webinterface muss ich noch selbst Hand anlegen, die notwendige Software
installieren, konfigurieren und aktivieren.
Das geht so:

    # opkg install px5g uhttpd-mod-tls
    # uci delete uhttpd.main.listen_http
    # uci commit
    # /etc/init.d/uhttpd restart
    # opkg remove px5g

Bei *px5g* handelt es sich um den Zertifikatsgenerator, der wird nur zum
Erzeugen eines Zertifikats für den Webserver benötigt und kann daher am Ende
wieder entfernt werden.

Alternativ kann ich das Webinterface auch durch einen SSH- oder
OpenVPN-Tunnel verwenden.

Allgemeine Hinweise
-------------------

Im Internet finden sich etliche Seiten mit Hinweisen, wie ein Linux-System
gehärtet werden kann.
Einige dieser Hinweise lassen sich für das Härten eines OpenWrt-Systems
verwenden.

**Minimire die Anzahl der Software-Pakete,** ist ein Tipp, der immer sinnvoll
ist, das dadurch die Angriffsfläche reduziert wird.
Nun ist auf vielen OpenWrt-Systemen sowieso wenig Platz, so dass dieser
Punkt ohnehin schon berücksichtigt ist.
Bei Standard-Images sollte man aber nur das nachinstallieren, was wirklich
benötigt ist.
Und bei selbst erstellten Images erst gar nichts überflüssiges hinein
nehmen.

**Kontrolliere die offenen Ports.**
Damit vergewissere ich mich, das ich keinen Dienst vergessen habe,
abzuschalten beziehungsweise zu sperren.
Von außen kann ich das mit dem Programm nmap auf einem benachbarten Rechner
machen oder einen der vielen Dienstleister im Internet, die solche Scans
anbieten, bemühen.
Von innen, also auf dem Gerät selbst zeigt mir ``netstat -aunt`` alle
offenen TCP- und UDP-Ports an.

**Halte das System aktuell.** ist immer wichtig, da ständig Programmfehler
gefunden und beseitigt werden.
Aber nicht, wenn das System nicht aktualisiert wird.

**Schaue regelmäßig in die Logs,** ist ein wichtiger Rat.
Nicht nur, weil ich dann Einbruchsversuche sehen kann und nötigenfalls
Gegenmaßnahmen ergreifen, sondern auch, weil sich System- und
Hardware-Fehler hin und wieder dort bemerkbar machen.
Sehr komfortabel geht das, wenn ich einen zentralen Logserver mit
geeigneter Software zur Auswertung der Logs habe und diese vom OpenWrt-Gerät
dorthin sende.

**Beobachte das System mit IDS und Monitoring-Systemen.**
Währen Logs meist erst nach dem Vorfall konsultiert werden, melden sich
diese Systeme sofort, wenn sie Anomalien entdecken.

**Ein Netzwerk-Service pro System.**
Dieser Grundsatz hat mehrere Vorteile.
Vom Standpunkt der Sicherheit fällt nur ein Dienst aus, wenn das System
ausfällt.
Und als Administrator muss ich mich bei einem Ersatz oder Upgrade eines
Systems nur auf einen Dienst konzentrieren, was die Sache sehr erleichtert.

**Deaktiviere den Zugang für root.**
Das ist bei Embedded Systems eher nicht die Norm, da sich im Normalfall
keine Benutzer anmelden.
OpenWrt bietet jedoch die Möglichkeit und wenn sowieso schon verschiedene
Zugänge für Revision und Operating existieren, sind die Hürden nur gering,
den root-Zugang ganz zu deaktivieren.

[tilos]: https://technet.microsoft.com/en-us/library/hh278941.aspx/

[wiki]: http://wiki.openwrt.org/doc/howto/secure.access
